// use crate::gp;

mod gp;

fn main() {
    let a_fitness = vec![
        [-5.0, -329.0],
        [-4.5, -236.375],
        [-4.0, -163.0],
        [-3.5, -106.625],
        [-3.0, -65.0],
        [-2.5, -35.875],
        [-2.0, -17.0],
        [-1.5, -6.125],
        [-1.0, -1.0],
        [-0.5, 0.625],
        [0.0, 1.0],
        [0.5, 2.375],
        [1.0, 7.0],
        [1.5, 17.125],
        [2.0, 35.0],
        [2.5, 62.875],
        [3.0, 103.0],
        [3.5, 157.625],
        [4.0, 229.0],
        [4.5, 319.375],
        [5.0, 431.0],
    ];
    let b_fitness = vec![
        [-5.0, -0.11339306483009282],
        [-4.5, 2.745779535264579],
        [-4.0, -1.5173535708588077],
        [-3.5, -1.8698147522341784],
        [-3.0, 0.24636295912482442],
        [-2.5, -0.9006812651896041],
        [-2.0, -2.686554322470927],
        [-1.5, 2.404956792331467],
        [-1.0, 3.064715260291829],
        [-0.5, 1.6197944396539414],
        [0.0, 1.0],
        [0.5, 1.6197944396539414],
        [1.0, 3.064715260291829],
        [1.5, 2.404956792331467],
        [2.0, -2.686554322470927],
        [2.5, -0.9006812651896041],
        [3.0, 0.24636295912482442],
        [3.5, -1.8698147522341784],
        [4.0, -1.5173535708588077],
        [4.5, 2.745779535264579],
        [5.0, -0.11339306483009282],
    ];
    let c_fitness = vec![
        [-5.0, -4.0],
        [-4.5, -3.5],
        [-4.0, -3.0],
        [-3.5, -2.5],
        [-3.0, -2.0],
        [-2.5, -1.5],
        [-2.0, -1.0],
        [-1.5, -0.5],
        [-1.0, 0.0],
        [-0.5, 0.5],
        [0.0, 1.0],
        [0.5, 1.5],
        [1.0, 2.0],
        [1.5, 2.5],
        [2.0, 3.0],
        [2.5, 3.5],
        [3.0, 4.0],
        [3.5, 4.5],
        [4.0, 5.0],
        [4.5, 5.5],
        [5.0, 6.0],
    ];

    let config: gp::Config = gp::Config {
        pop_size: 4000,
        max_generations: 51,
        mutate_prob: 0.02,
        selection: "tournament".to_string(),
        fitness_order: "desc".to_string(),
        chromosome_function: ["+", "-", "*", "/", "sin", "cos", "exp"]
            .iter()
            .map(|x| x.to_string())
            .collect(),
        chromosome_terminal: vec!["x".to_string(), "R".to_string()],
        chromosome_combined: ["+", "-", "*", "/", "sin", "cos", "exp", "x", "R"]
            .iter()
            .map(|x| x.to_string())
            .collect(),
        max_fitness_evals: 20000,
        tree_limit_initial: 6,
        tree_limit_running: 17,
    };

    let gen = gp::GP::new(a_fitness, config);
    gen.run()
}
